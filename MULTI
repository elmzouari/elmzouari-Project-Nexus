// components/auth-dialog.tsx
import React, { useState, useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { setAuthFromRefresh } from './authSlice';

const AuthDialog = () => {
  const [open, setOpen] = useState(false);
  const dispatch = useDispatch();

  useEffect(() => {
    function onPrompt() {
      setOpen(true);
    }
    if (typeof window !== "undefined") {
      window.addEventListener("auth:prompt", onPrompt as EventListener);
    }
    return () => {
      if (typeof window !== "undefined") {
        window.removeEventListener("auth:prompt", onPrompt as EventListener);
      }
    };
  }, []);

  // /** rest of code here **/

  return (
    <div>
      {open && (
        <div>
          {/* Dialog content */}
        </div>
      )}
    </div>
  );
};

export default AuthDialog;

// components/auth-init.tsx
import React, { useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { setAuthFromRefresh } from './authSlice';

const AuthInit = ({ tokenInStore }) => {
  const dispatch = useDispatch();

  useEffect(() => {
    const lsToken = typeof window === "undefined" ? null : localStorage.getItem("auth_token");
    if (lsToken || tokenInStore) return;

    let cancelled = false;
    (async () => {
      try {
        const res = await fetch("/api/auth/refresh", { credentials: "include", cache: "no-store" });
        if (!res.ok) {
          if (res.status === 401 && typeof window !== "undefined") {
            window.dispatchEvent(new Event("auth:prompt"));
          }
          return;
        }
        const data = await res.json();
        if (cancelled) return;
        if (data?.token && data?.user) {
          dispatch(setAuthFromRefresh({ token: data.token, user: data.user }));
        }
      } catch {
        if (typeof window !== "undefined") {
          window.dispatchEvent(new Event("auth:prompt"));
        }
      }
    })();

    return () => {
      cancelled = true;
    };
  }, [dispatch, tokenInStore]);

  // /** rest of code here **/

  return <div>Auth Init Component</div>;
};

export default AuthInit;

// lib/features/polls/pollsSlice.ts
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';

const pollsSlice = createSlice({
  name: 'polls',
  initialState: {
    polls: [],
    error: null,
  },
  reducers: {
    resetAuth: (state) => {
      // Reset auth logic here
    },
  },
  extraReducers: (builder) => {
    builder.addCase(voteOnPoll.fulfilled, (state, action) => {
      // Handle fulfilled action here
    });
    builder.addCase(voteOnPoll.rejected, (state, action) => {
      if (action.payload?.status === 401) {
        try {
          // @ts-ignore
          action.dispatch(resetAuth());
        } catch {}
        if (typeof window !== "undefined") {
          window.dispatchEvent(new Event("auth:prompt"));
        }
      }
    });
  },
});

export const voteOnPoll = createAsyncThunk(
  'polls/voteOnPoll',
  async ({ pollId, option }, thunkAPI) => {
    const { dispatch } = thunkAPI;
    const lsToken = typeof window === "undefined" ? null : localStorage.getItem("auth_token");

    try {
      const res = await axios.post(`/api/polls/${pollId}/vote`, { option }, { headers: { Authorization: `Bearer ${lsToken}` } });
      return res.data;
    } catch (error) {
      if (error.response?.status === 401) {
        try {
          const refreshRes = await axios.post('/api/auth/refresh', {}, { credentials: "include", cache: "no-store" });
          const data = refreshRes.data;
          if (data?.token && data?.user) {
            dispatch(setAuthFromRefresh({ token: data.token, user: data.user }));
            const retryRes = await axios.post(`/api/polls/${pollId}/vote`, { option }, { headers: { Authorization: `Bearer ${data.token}` } });
            return retryRes.data;
          }
        } catch {
          if (typeof window !== "undefined") {
            window.dispatchEvent(new Event("auth:prompt"));
          }
        }
      }
      throw error;
    }
  }
);

export const { resetAuth } = pollsSlice.actions;
export default pollsSlice.reducer;
